head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2009.05.20.20.51.03;	author tja1618;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
** SCCS ID:	@@(#)processes.h	1.1	03/31/09
**
** File:	processes.h
**
** Author:	4003-506 class of 20083
**
** Contributor:
**
** Description:	process-related types and functions
*/

#ifndef _PROCESSES_H
#define _PROCESSES_H

#include "headers.h"

#include "disk.h"  // pending requests pcd field

/*
** General (C and/or assembly) definitions
*/

	// process states

#define	PROC_FREE	0
#define	PROC_NEW	1
#define	PROC_READY	2
#define	PROC_RUNNING	3
#define	PROC_ZOMBIE	4
#define	PROC_SLEEPING	5
#define	PROC_BLOCKED	6

	// process levels

#define	LEVEL_HIGH	0
#define	LEVEL_MEDIUM	1
#define	LEVEL_LOW	2

#define	MLQ_LEVELS	3
#define	LEVEL_DEFAULT	LEVEL_MEDIUM

	// quantum values

#define	QUANTUM_SHORT	1
#define	QUANTUM_MEDIUM	2
#define	QUANTUM_LONG	3

#define	QUANTUM_DEFAULT	2

#ifndef __ASM__20083__

#include "queues.h"
#include "stacks.h"

/*
** Start of C-only definitions
*/

/*
** Types
*/

	// process context
	// NOTE:  order of members depends on the
	// register save code in isr_stubs.S!!!!

typedef struct context {
	uint32_t ss;
	uint32_t gs;
	uint32_t fs;
	uint32_t es;
	uint32_t ds;
	uint32_t edi;
	uint32_t esi;
	uint32_t ebp;
	uint32_t esp;
	uint32_t ebx;
	uint32_t edx;
	uint32_t ecx;
	uint32_t eax;
	uint32_t vector;
	uint32_t code;
	uint32_t eip;
	uint32_t cs;
	uint32_t eflags;
} context_t;

	// process control block
	// fields are ordered by size for compactness

typedef struct pcb {
	// 32-bit fields
	context_t *context;		// must be first!
	stack_t *stack;
	uint32_t wakeup;
        disk_request_t *pending_request;
	// 16-bit fields
	uint16_t pid;
	uint16_t ppid;
	// 8-bit fields
	uint8_t status;
	uint8_t level;
	uint8_t quantum;
} pcb_t;

/*
** Globals
*/

extern pcb_t _pcbs[];		// all PCBs in the system
extern pcb_t *_current;		// current process
extern uint16_t _next_pid;	// next available PID

extern queue_t _ready[];	// system ready queue
extern queue_t _sleeping;	// queue of sleeping processes
extern queue_t _reading;	// queue of processes blocked on input

extern queue_t _blocked_requests; // queue of processes blocked on a disk request

/*
** Prototypes
*/

/*
** _pcb_alloc()
**
** allocate a PCB structure
**
** returns a pointer to the PCB, or NULL on failure
*/

pcb_t *_pcb_alloc( void );

/*
** _pcb_dealloc(pcb)
**
** deallocate a PCB structure
**
** returns the status from the _q_insert() call
*/

int _pcb_dealloc( pcb_t *pcb );

/*
** _pcb_init()
**
** initializes all process-related data structures
*/

void _pcb_init( void );

#endif

#endif
@
